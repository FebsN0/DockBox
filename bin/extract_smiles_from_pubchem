#!/usr/bin/python
import os
import sys
import json
import re
import time
try:
    from urllib.error import HTTPError
    from urllib.parse import quote, urlencode
    from urllib.request import urlopen
except ImportError:
    from urllib import urlencode
    from urllib2 import quote, urlopen, HTTPError
import argparse

parser = argparse.ArgumentParser(description="Get SMILES strings from PubChem of specified compounds")

parser.add_argument('-c',
    type=str,
    dest='compound_names',
    nargs='+',
    metavar='STR',
    help='compound names')

parser.add_argument('-cid',
    action='store_true',
    help='Use CID to name compounds.')

parser.add_argument('-split',
    action='store_true',
    help='split the SMILES strings in different files.')

args = parser.parse_args()

# Find all information you need on how to extract pubchem data at: https://pubchemdocs.ncbi.nlm.nih.gov/pug-rest
API_BASE = 'https://pubchem.ncbi.nlm.nih.gov/rest/pug'

def is_smiles(string):
    """Check if string looks like smiles formula"""
    has_character = False
    for c in ['[', ']', '=', '(', ')', '@']:
        if c in string:
            has_character = True
    return has_character

def find_property(info, query, name):
    """Find property from JSON info on compound 

inputs:
     - info: JSON (dictionary of dictionary of...)
     - query: name of the property 
     - name: name of the compound

  output:
     - value of property
"""
    props_cmp = info['props']
    if query == 'smiles':
        search = {'label': 'SMILES', 'name': 'Isomeric'}
        key_value = 'sval'
    elif query == 'iupac':
        search = {'label': 'IUPAC Name', 'name': 'Preferred'}
        key_value = 'sval'
    else:
        raise ValueError('Query should be one of ' + ', '.join(features_compound) + '.')

    has_query = False
    for prop in props_cmp:
        if all(item in prop['urn'].items() for item in search.items()):
            has_query = True
            prop_value = prop
            break
    if has_query:
        return prop_value['value'][key_value]
    else:
        print query + " not found for compound " + name
        return None

if not args.split:
    ff = open('compounds.smi', 'w')

for cmp_name in args.compound_names:
    # check if name provided is smiles or real name
    if is_smiles(cmp_name):
        namespace = 'smiles'
    else:
        namespace = 'name'

    apiurl_cmp = API_BASE + '/compound/' + namespace + '/JSON'

    postdata_cmp = urlencode({namespace: cmp_name}).encode('utf8')
    postdata_cmp = postdata_cmp.replace('%C2%A0', '+')
    try:
        response = urlopen(apiurl_cmp, postdata_cmp)
        has_found_compound = True
    except HTTPError:
        msg = "Compound %s not found! Check compound name again!"%cmp_name
        has_found_compound = False

    if has_found_compound:
        response = response.read()

        extracted_content_json = json.loads(response.decode())
        extracted_content_json = extracted_content_json['PC_Compounds']

        extracted_content_json = extracted_content_json[0]

        # get cid and smiles
        cid = int(extracted_content_json['id']['id']['cid'])
        smiles = find_property(extracted_content_json, 'smiles', cmp_name)

        if args.cid:
            name = cid
            filename = 'Conformer3D_CID_'+str(cid)+'.smi'
        else:
            name = cmp_name
            filename = cmp_name + '.smi'

        if args.split:
            with open(filename, 'w') as ff:
                ff.write(smiles + ' ' + name + '\n')
        else:
            ff.write(smiles + ' ' + name + '\n')
    else:
        print "Molecule %s not found" %cmp_name

if not args.split:
    ff.close()
